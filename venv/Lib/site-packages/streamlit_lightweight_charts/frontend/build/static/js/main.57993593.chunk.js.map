{"version":3,"sources":["LightweightCharts.tsx","index.tsx"],"names":["LightweightChartsMultiplePanes","chartsData","useRenderData","args","chartsContainerRef","useRef","chartElRefs","Array","length","fill","chartRefs","useEffect","find","ref","current","forEach","i","chart","createChart","_objectSpread","height","width","clientWidth","timeScale","fitContent","_step","_iterator","_createForOfIteratorHelper","series","s","n","done","value","chartSeries","type","addAreaSeries","options","addBarSeries","addBaselineSeries","addCandlestickSeries","addHistogramSeries","addLineSeries","priceScale","priceScaleId","applyOptions","setData","data","err","e","f","charts","map","c","subscribeVisibleTimeRangeChange","filter","rightOffset","scrollPosition","subscribeVisibleLogicalRangeChange","range","setVisibleLogicalRange","from","to","remove","React","createElement","id","concat","key","ReactDOM","render","StrictMode","StreamlitProvider","LightweightCharts","document","getElementById"],"mappings":"4PAqHeA,EA9GmC,WAIhD,IACMC,EADaC,0BACWC,KAAa,OAErCC,EAAqBC,iBAAuB,MAC5CC,EAAcC,MAAMN,EAAWO,QAAQC,KAAKJ,iBAAuB,OACnEK,EAAYL,iBAAoB,IAuFpC,OArFAM,qBAAU,WACR,IAAIL,EAAYM,MAAK,SAACC,GAAG,OAAMA,EAAIC,WAAnC,CAEAR,EAAYS,SAAQ,SAACF,EAAKG,GACxB,IAAMC,EAAQP,EAAUI,QAAQE,GAAKE,YACnCL,EAAIC,QAAOK,YAAA,CACTC,OAAQ,IACRC,MAAOf,EAAYU,GAAGF,QAAQQ,aAC3BrB,EAAWe,GAAGC,QAIrBA,EAAMM,YAAYC,aAAa,IAEUC,EAFVC,EAAAC,YAEV1B,EAAWe,GAAGY,QAAM,IAAzC,IAAAF,EAAAG,MAAAJ,EAAAC,EAAAI,KAAAC,MAA0C,CAAC,IAAhCH,EAAMH,EAAAO,MAEXC,OAAW,EACf,OAAOL,EAAOM,MACZ,IAAK,OACHD,EAAchB,EAAMkB,cAAcP,EAAOQ,SACzC,MACF,IAAK,MACHH,EAAchB,EAAMoB,aAAaT,EAAOQ,SACxC,MACF,IAAK,WACHH,EAAchB,EAAMqB,kBAAkBV,EAAOQ,SAC7C,MACF,IAAK,cACHH,EAAchB,EAAMsB,qBAAqBX,EAAOQ,SAChD,MACF,IAAK,YACHH,EAAchB,EAAMuB,mBAAmBZ,EAAOQ,SAC9C,MACF,IAAK,OACHH,EAAchB,EAAMwB,cAAcb,EAAOQ,SACzC,MACF,QACI,OAGHR,EAAOc,YACRzB,EAAMyB,WAAWd,EAAOQ,QAAQO,cAAgB,IAAIC,aAAahB,EAAOc,YAE1ET,EAAYY,QAAQjB,EAAOkB,OAC5B,MAAAC,GAAArB,EAAAsB,EAAAD,GAAA,QAAArB,EAAAuB,QAIH,IAAMC,EAASxC,EAAUI,QAAQqC,KAAI,SAACC,GAAC,OAAKA,KA6B5C,OA3BGnD,EAAWO,OAAS,GACrB0C,EAAOnC,SAAQ,SAACE,GACTA,IAELA,EAAMM,YAAY8B,iCAAgC,SAACL,GACjDE,EACGI,QAAO,SAACF,GAAC,OAAKA,IAAMnC,KACpBF,SAAQ,SAACqC,GACRA,EAAE7B,YAAYqB,aAAa,CACzBW,YAAatC,EAAMM,YAAYiC,yBAIvCvC,EAAMM,YAAYkC,oCAAmC,SAACC,GAChDA,GACFR,EACGI,QAAO,SAACF,GAAC,OAAKA,IAAMnC,KACpBF,SAAQ,SAACqC,GACRA,EAAE7B,YAAYoC,uBAAuB,CACnCC,KAAW,OAALF,QAAK,IAALA,OAAK,EAALA,EAAOE,KACbC,GAAS,OAALH,QAAK,IAALA,OAAK,EAALA,EAAOG,eAOlB,WACLX,EAAOnC,SAAQ,SAACE,GACdA,EAAM6C,gBAIT,CAAE7D,EAAYK,EAAaI,IAG5BqD,IAAAC,cAAA,OAAKnD,IAAKT,GACPE,EAAY6C,KAAI,SAACtC,EAAKG,GAAC,OACtB+C,IAAAC,cAAA,OACEnD,IAAKA,EACLoD,GAAE,sBAAAC,OAAwBlD,GAC1BmD,IAAG,sBAAAD,OAAwBlD,UCxGvCoD,IAASC,OACPN,IAAAC,cAACD,IAAMO,WAAU,KACfP,IAAAC,cAACO,oBAAiB,KAChBR,IAAAC,cAACQ,EAAiB,QAGtBC,SAASC,eAAe,W","file":"static/js/main.57993593.chunk.js","sourcesContent":["import { useRenderData } from \"streamlit-component-lib-react-hooks\"\nimport {\n  createChart,\n  IChartApi,\n} from \"lightweight-charts\"\nimport React, { useRef, useEffect } from \"react\"\n\nconst LightweightChartsMultiplePanes: React.VFC = () => {\n\n  // returns the renderData passed from Python\n  // { args: object, disabled: boolean, theme: object }\n  const renderData = useRenderData()\n  const chartsData = renderData.args[\"charts\"]\n\n  const chartsContainerRef = useRef<HTMLDivElement>(null)\n  const chartElRefs = Array(chartsData.length).fill(useRef<HTMLDivElement>(null))\n  const chartRefs = useRef<IChartApi[]>([])\n\n    useEffect(() => {\n      if (chartElRefs.find((ref) => !ref.current)) return;\n\n      chartElRefs.forEach((ref, i) => {\n        const chart = chartRefs.current[i] = createChart(\n          ref.current as HTMLDivElement,{\n            height: 300,\n            width: chartElRefs[i].current.clientWidth,\n            ...chartsData[i].chart,\n          }\n        );\n        \n        chart.timeScale().fitContent();\n\n        for (const series of chartsData[i].series){\n          \n          let chartSeries\n          switch(series.type) {\n            case 'Area':\n              chartSeries = chart.addAreaSeries(series.options)\n              break\n            case 'Bar':\n              chartSeries = chart.addBarSeries(series.options )\n              break\n            case 'Baseline':\n              chartSeries = chart.addBaselineSeries(series.options)\n              break\n            case 'Candlestick':\n              chartSeries = chart.addCandlestickSeries(series.options)\n              break\n            case 'Histogram':\n              chartSeries = chart.addHistogramSeries(series.options)\n              break\n            case 'Line':\n              chartSeries = chart.addLineSeries(series.options)\n              break\n            default:\n                return\n          }\n\n          if(series.priceScale)\n            chart.priceScale(series.options.priceScaleId || '').applyOptions(series.priceScale)\n\n          chartSeries.setData(series.data)\n        }\n        \n      })\n  \n      const charts = chartRefs.current.map((c) => c as IChartApi);\n      \n      if(chartsData.length > 1){ // sync charts\n        charts.forEach((chart) => {\n          if (!chart) return;\n\n          chart.timeScale().subscribeVisibleTimeRangeChange((e) => {\n            charts\n              .filter((c) => c !== chart)\n              .forEach((c) => {\n                c.timeScale().applyOptions({\n                  rightOffset: chart.timeScale().scrollPosition()\n                })\n              })\n          })\n          chart.timeScale().subscribeVisibleLogicalRangeChange((range) => {\n            if (range) {\n              charts\n                .filter((c) => c !== chart)\n                .forEach((c) => {\n                  c.timeScale().setVisibleLogicalRange({\n                    from: range?.from,\n                    to: range?.to\n      }) }) } }) }) }\n\n      // const handleResize = () => {\n      //   chart.applyOptions({ width: chartsContainerRef?.current?.clientWidth })\n      // }\n      // window.addEventListener('resize', handleResize)\n      return () => { // required because how useEffect() works\n        charts.forEach((chart) => {\n          chart.remove()\n        })\n      }\n\n    }, [ chartsData, chartElRefs, chartRefs])\n  \n    return (\n      <div ref={chartsContainerRef}>\n        {chartElRefs.map((ref, i) => (\n          <div\n            ref={ref}\n            id={`lightweight-charts-${i}`}\n            key={`lightweight-charts-${i}`}\n          />\n        ))}\n      </div>\n    )\n\n}\n\nexport default LightweightChartsMultiplePanes\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { StreamlitProvider } from \"streamlit-component-lib-react-hooks\"\nimport LightweightCharts from \"./LightweightCharts\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitProvider>\n      <LightweightCharts />\n    </StreamlitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}